# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hzOAsfHgndhkhTnb7kwXpmbU8XxgcgCy
"""

from keras.datasets import imdb

((traindatax, traindatay), (testdatax, testdatay)) = imdb.load_data(num_words = 20000)

len(traindatax)

len(testdatax)

print(traindatax[0])

DICT = imdb.get_word_index()

print(DICT)

DICTR = dict([quantity, pwd] for (pwd, quantity) in DICT.items())

reviewstars = " ".join([DICTR.get(j - 3, "$#NAN#$") for j in traindatax[0]])

print(reviewstars)

import numpy as nu

def returnvectorizedsentencesfromdictionary(si, dim = 20000):
  cout = nu.zeros((len(si), dim))
  for j, scurr in enumerate(si):
    cout[j, scurr] = 1
  return cout

trainvdataX = returnvectorizedsentencesfromdictionary(traindatax)
testvdataX = returnvectorizedsentencesfromdictionary(testdatax)

print(trainvdataX.shape)
print(testvdataX.shape)

print(trainvdataX[0])

trainfdataY = nu.asarray(traindatay).astype("float32")
testfdataY = nu.asarray(testdatay).astype("float32")

from keras import models as THREELAPARCH
from keras.layers import Dense

threelaparch = THREELAPARCH.Sequential()
threelaparch.add(Dense(19, activation = "relu", input_shape = (20000,)))
threelaparch.add(Dense(18, activation = "relu"))
threelaparch.add(Dense(1, activation = "sigmoid"))

threelaparch.compile(optimizer = "rmsprop", loss = "binary_crossentropy", metrics = ["accuracy"])

threelaparch.summary()

trainvadataX = trainvdataX[:7000]
trainndataX = trainvdataX[7000:]
trainvadataY = trainfdataY[:7000]
trainndataY = trainfdataY[7000:]

history = threelaparch.fit(trainndataX, trainndataY, epochs = 2, batch_size = 70, validation_data = (trainvadataX, trainvadataY))

import matplotlib.pyplot as ppplot

hist = history.history

ppplot.plot(hist["val_loss"], label = "Validation Cost")
ppplot.plot(hist["loss"], label = "Training Cost")
ppplot.xlabel("Iteration of epochs")
ppplot.ylabel("Cost")
ppplot.legend()
ppplot.show()

ppplot.plot(hist["val_accuracy"], label = "Validation Acc")
ppplot.plot(hist["accuracy"], label = "Training Acc")
ppplot.xlabel("Iteration of epochs")
ppplot.ylabel("Acc")
ppplot.legend()
ppplot.show()

ppplot.plot(hist["val_accuracy"], label = "Validation Acc")
ppplot.plot(hist["accuracy"], label = "Training Acc")
ppplot.xlabel("Iteration of epochs")
ppplot.ylabel("Acc")
ppplot.legend()
ppplot.show()

ppplot.plot(hist["val_loss"], label = "Validation Cost")
ppplot.plot(hist["loss"], label = "Training Cost")
ppplot.xlabel("Iteration of epochs")
ppplot.ylabel("Cost")
ppplot.legend()
ppplot.show()

threelaparch.evaluate(testvdataX, testfdataY)[1]

threelaparch.evaluate(trainvdataX, trainfdataY)[1]

threelaparch.predict(testvdataX)